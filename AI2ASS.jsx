// Generated by CoffeeScript 1.3.3
var byLayer, collectPaths, cubic, drawCom, drawStrs, fixCoords, handleCMYK, handleGray, handleRGB, linear, manageColor, scl, zeroPad;

app.userInteractionLevel = UserInteractionLevel.DISPLAYALERTS;

scl = parseInt(prompt("Scale by 2^(n-1) (minimum 1)", 1));

drawStrs = {};

drawCom = 0;

fixCoords = function(coordArr) {
  coordArr[0] = Math.round(coordArr[0] * Math.pow(2, scl - 1));
  coordArr[1] = -Math.round(coordArr[1] * Math.pow(2, scl - 1));
  return coordArr.join(" ");
};

linear = function(currPoint) {
  var drawing;
  drawing = "";
  if (drawCom !== 1) {
    drawCom = 1;
    drawing = "l ";
  }
  return drawing += fixCoords(currPoint.anchor) + " ";
};

cubic = function(currPoint, prevPoint) {
  var drawing;
  drawing = "";
  if (drawCom !== 2) {
    drawCom = 2;
    drawing = "b ";
  }
  return drawing += fixCoords(prevPoint.rightDirection, scl) + " " + fixCoords(currPoint.leftDirection, scl) + " " + fixCoords(currPoint.anchor, scl) + " ";
};

byLayer = function() {
  var currLayer, _i, _ref, _results;
  _results = [];
  for (currLayer = _i = _ref = app.activeDocument.layers.length - 1; _i >= 0; currLayer = _i += -1) {
    currLayer = app.activeDocument.layers[currLayer].name;
    if (drawStrs[currLayer]) {
      _results.push(prompt("COPY THIS", drawStrs[currLayer].replace(/[ ]$/, ""), "copy it"));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

zeroPad = function(num) {
  if (num < 16) {
    return "0" + num.toString(16);
  }
  return num.toString(16);
};

handleCMYK = function(theColor) {
  var b, c, g, k, m, r, y;
  c = theColor.cyan / 100;
  m = theColor.magenta / 100;
  y = theColor.yellow / 100;
  k = theColor.black / 100;
  r = Math.round((1 - c) * (1 - k) * 255);
  b = Math.round((1 - y) * (1 - k) * 255);
  g = Math.round((1 - m) * (1 - k) * 255);
  return ("&H" + zeroPad(b) + zeroPad(g) + zeroPad(r) + "&").toUpperCase();
};

handleGray = function(theColor) {
  var pct;
  pct = theColor.gray;
  pct = Math.round(pct * 255 / 100);
  return ("&H" + zeroPad(pct) + zeroPad(pct) + zeroPad(pct) + "&").toUpperCase();
};

handleRGB = function(theColor) {
  var b, g, r;
  r = Math.round(theColor.red);
  g = Math.round(theColor.green);
  b = Math.round(theColor.blue);
  return ("&H" + zeroPad(b) + zeroPad(g) + zeroPad(r) + "&").toUpperCase();
};

manageColor = function(currPath, field) {
  switch (currPath[field].typename) {
    case "RGBColor":
      return handleRGB(currPath[field]);
    case "GrayColor":
      return handleGray(currPath[field]);
    case "CMYKColor":
      return handleCMYK(currPath[field]);
    case "noColor":
      return false;
    default:
      alert("Unsupported colorspace used.");
      return error();
  }
};

collectPaths = function(callback) {
  var currPath, currPoint, fgc, j, lname, points, prevPoint, sc, _i, _j, _len, _ref, _ref1;
  _ref = app.activeDocument.pathItems;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    currPath = _ref[_i];
    lname = currPath.layer.name;
    fgc = "\\c" + manageColor(currPath, "fillColor");
    if (!fgc) {
      fgc = "\\1a&HFF&";
    }
    sc = "\\3c" + manageColor(currPath, "strokeColor");
    if (!sc) {
      sc = "\\3a&HFF&";
    }
    if (!drawStrs[lname]) {
      drawStrs[lname] = "{" + fgc + sc + "\\p" + scl + "}";
    }
    points = currPath.pathPoints;
    if (points.length > 0) {
      drawCom = 0;
      drawStrs[lname] += "m " + fixCoords(points[0].anchor, scl) + " ";
      for (j = _j = 1, _ref1 = points.length; _j < _ref1; j = _j += 1) {
        currPoint = points[j];
        prevPoint = points[j - 1];
        if (currPoint.pointType === PointType.CORNER && prevPoint.pointType === PointType.CORNER) {
          drawStrs[lname] += linear(currPoint);
        } else {
          drawStrs[lname] += cubic(currPoint, prevPoint);
        }
      }
      prevPoint = points[points.length - 1];
      currPoint = points[0];
      if (currPoint.pointType === PointType.SMOOTH || prevPoint.pointType === PointType.SMOOTH) {
        drawStrs[lname] += cubic(currPoint, prevPoint);
      }
    }
  }
  return callback();
};

collectPaths(byLayer);
